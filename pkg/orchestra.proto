package orchestra;

message JobParameter {
	required string	key = 1;
	required string	value = 2;
}

message TaskRequest {
	required string jobname = 1;
	optional uint64	id = 2;
	repeated JobParameter parameters = 3;
}

message Acknowledgement {
	required uint64	id = 1;
	enum AckType {
		ACK_OK = 1;
		ACK_DUPLICATE = 2; /* Job or Response for JobID already exists locally */
		ACK_ERROR = 3; /* Other Error */
	}
	required AckType	response = 2 [default=ACK_OK];
}

message TaskResponse {
	required uint64	id = 1;
	enum TaskStatus {
		JOB_INPROGRESS = 2;	// Client has the job.
		JOB_SUCCESS = 3;	// everything was OK, we don't care.
		JOB_FAILED = 4;		// the job ran ok, but told us it blew up.
		JOB_HOST_FAILURE = 5;	// something internally blew up.
		JOB_UNKNOWN = 6;	// What Job?
		JOB_UNKNOWN_FAILURE = 7;// somethign went wrong, but we don't know what.
	}
	required TaskStatus status = 3;
	repeated JobParameter response = 4;
}

message QueueRequest {
	required TaskRequest	job = 1;

	enum TargetMode {
		ONEOF = 1;
		ALLOF = 2;
	}
	
	required TargetMode where = 2;
	repeated string target = 3;
}

message QueueResponse {
	required bool	success = 1 [default=true];
	required int64	id = 2;		// job id
	optional string error = 3;
}

message StatusRequest {
	required int64		id = 1; // job id
}

message StatusResponse {
	required bool	success = 1 [default=true];
	optional string	error   = 2;
	repeated TaskResponse	responses = 3; // one for each target.
}

message IdentifyClient {
	required string	hostname = 1;
}

service MasterProtocol {
	rpc Queue (QueueRequest) returns (QueueResponse);
	rpc Status (StatusRequest) returns (StatusResponse);
}
