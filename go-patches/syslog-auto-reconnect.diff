diff -r b0819469a6df src/pkg/syslog/syslog.go
--- a/src/pkg/syslog/syslog.go	Thu Sep 08 12:16:42 2011 +1000
+++ b/src/pkg/syslog/syslog.go	Tue Sep 20 11:29:08 2011 +1000
@@ -17,23 +17,66 @@
 type Priority int
 
 const (
-	// From /usr/include/sys/syslog.h.
-	// These are the same on Linux, BSD, and OS X.
-	LOG_EMERG Priority = iota
-	LOG_ALERT
-	LOG_CRIT
-	LOG_ERR
-	LOG_WARNING
-	LOG_NOTICE
-	LOG_INFO
-	LOG_DEBUG
+	// these are internal and are used to detect when overrides
+	// are in place.
+	SeverityPresent = Priority(0x100)
+	SeverityMask    = Priority(0x7)
+	FacilityPresent = Priority(0x200)
+	FacilityMask    = Priority(0x1f << 3)
+
+	// From the RFCs.  Names lifted from C.
+	LOG_EMERG   = Priority(0) | SeverityPresent
+	LOG_ALERT   = Priority(1) | SeverityPresent
+	LOG_CRIT    = Priority(2) | SeverityPresent
+	LOG_ERR     = Priority(3) | SeverityPresent
+	LOG_WARNING = Priority(4) | SeverityPresent
+	LOG_NOTICE  = Priority(5) | SeverityPresent
+	LOG_INFO    = Priority(6) | SeverityPresent
+	LOG_DEBUG   = Priority(7) | SeverityPresent
+
+	LOG_KERN     = Priority(0<<3) | FacilityPresent
+	LOG_USER     = Priority(1<<3) | FacilityPresent
+	LOG_MAIL     = Priority(2<<3) | FacilityPresent
+	LOG_DAEMON   = Priority(3<<3) | FacilityPresent
+	LOG_AUTH     = Priority(4<<3) | FacilityPresent
+	LOG_SYSLOG   = Priority(5<<3) | FacilityPresent
+	LOG_LPR      = Priority(6<<3) | FacilityPresent
+	LOG_NEWS     = Priority(7<<3) | FacilityPresent
+	LOG_UUCP     = Priority(8<<3) | FacilityPresent
+	LOG_CRON     = Priority(9<<3) | FacilityPresent
+	LOG_AUTHPRIV = Priority(10<<3) | FacilityPresent
+	LOG_FTP      = Priority(11<<3) | FacilityPresent
+	LOG_LOCAL0   = Priority(16<<3) | FacilityPresent
+	LOG_LOCAL1   = Priority(17<<3) | FacilityPresent
+	LOG_LOCAL2   = Priority(18<<3) | FacilityPresent
+	LOG_LOCAL3   = Priority(19<<3) | FacilityPresent
+	LOG_LOCAL4   = Priority(20<<3) | FacilityPresent
+	LOG_LOCAL5   = Priority(21<<3) | FacilityPresent
+	LOG_LOCAL6   = Priority(22<<3) | FacilityPresent
+	LOG_LOCAL7   = Priority(23<<3) | FacilityPresent
 )
 
+// splicePriority takes origPri, and mixes in a severity or facility
+// if present in mixPri.
+func splicePriority(origPri, mixPri Priority) (newPri Priority) {
+	newPri = origPri
+	if (mixPri & SeverityPresent) == SeverityPresent {
+		newPri = (newPri & ^SeverityMask) | (mixPri & SeverityMask)
+	}
+	if (mixPri & FacilityPresent) == FacilityPresent {
+		newPri = (newPri & ^FacilityMask) | (mixPri & FacilityMask)
+	}
+	return newPri
+}
+
 // A Writer is a connection to a syslog server.
 type Writer struct {
 	priority Priority
 	prefix   string
 	conn     serverConn
+	// persist the configured peer so we can reconnect when things really catch on fire.
+	network string
+	raddr   string
 }
 
 type serverConn interface {
@@ -53,38 +96,104 @@
 	return Dial("", "", priority, prefix)
 }
 
-// Dial establishes a connection to a log daemon by connecting
-// to address raddr on the network net.
+// Dial sets up a connection to a log daemon.  The connection attempt
+// will be deferred until the first log message is sent.
 // Each write to the returned writer sends a log message with
 // the given priority and prefix.
+// If the prefix is empty, the binary's name - will be used in it's place.
 func Dial(network, raddr string, priority Priority, prefix string) (w *Writer, err os.Error) {
 	if prefix == "" {
 		prefix = os.Args[0]
 	}
-	var conn serverConn
-	if network == "" {
-		conn, err = unixSyslog()
+	return &Writer{priority & 0xFF, prefix, nil, network, raddr}, err
+}
+
+// Actually perform a real reconnect, closing any connections that may be open.
+func (w *Writer) Reconnect() (err os.Error) {
+	if w.conn != nil {
+		log.Printf("writer.Reconnect() on old connection.\n")
+		w.conn.close()
+		w.conn = nil
+	}
+	if w.network == "" {
+		w.conn, err = unixSyslog()
 	} else {
 		var c net.Conn
-		c, err = net.Dial(network, raddr)
-		conn = netConn{c}
+		c, err = net.Dial(w.network, w.raddr)
+		w.conn = &netConn{c}
 	}
-	return &Writer{priority, prefix, conn}, err
+	return err
+}
+
+func canRetry(err os.Error) bool {
+	// not an error?  can't retry.
+	if err == nil {
+		return false
+	}
+	oe, ok := err.(*net.OpError)
+	if ok {
+		if oe.Error == os.ECONNREFUSED {
+			return true
+		}
+	}
+	return false
 }
 
 // Write sends a log message to the syslog daemon.
-func (w *Writer) Write(b []byte) (int, os.Error) {
-	if w.priority > LOG_DEBUG || w.priority < LOG_EMERG {
-		return 0, os.EINVAL
+func (w *Writer) Write(b []byte) (bout int, err os.Error) {
+	if w.conn == nil {
+		err = w.Reconnect()
+		if err != nil {
+			return 0, err
+		}
 	}
-	return w.conn.writeBytes(w.priority, w.prefix, b)
+	retried := false
+retry:
+	bout, err = w.conn.writeBytes(w.priority, w.prefix, b)
+
+	if canRetry(err) && !retried {
+		retried = true
+		err = w.Reconnect()
+		if err != nil {
+			return 0, err
+		}
+		goto retry
+	}
+	return bout, err
 }
 
-func (w *Writer) writeString(p Priority, s string) (int, os.Error) {
-	return w.conn.writeString(p, w.prefix, s)
+func (w *Writer) writeString(p Priority, s string) (bout int, err os.Error) {
+	msgpriority := splicePriority(w.priority, p)
+	if w.conn == nil {
+		err := w.Reconnect()
+		if err != nil {
+			return 0, err
+		}
+	}
+	retried := false
+retry:
+	bout, err = w.conn.writeString(msgpriority, w.prefix, s)
+	if canRetry(err) && !retried {
+		log.Printf("Retrying: %s", err)
+		if err == os.ECONNREFUSED {
+			log.Printf("Hit!")
+		}
+		retried = true
+		err = w.Reconnect()
+		if err != nil {
+			return 0, err
+		}
+		goto retry
+	}
+	return bout, err
 }
 
-func (w *Writer) Close() os.Error { return w.conn.close() }
+func (w *Writer) Close() os.Error {
+	if w.conn != nil {
+		return w.conn.close()
+	}
+	return nil
+}
 
 // Emerg logs a message using the LOG_EMERG priority.
 func (w *Writer) Emerg(m string) (err os.Error) {
@@ -124,15 +233,15 @@
 	return err
 }
 
-func (n netConn) writeBytes(p Priority, prefix string, b []byte) (int, os.Error) {
-	return fmt.Fprintf(n.conn, "<%d>%s: %s\n", p, prefix, b)
+func (n *netConn) writeBytes(p Priority, prefix string, b []byte) (int, os.Error) {
+	return fmt.Fprintf(n.conn, "<%d>%s: %s\n", p&0xFF, prefix, b)
 }
 
-func (n netConn) writeString(p Priority, prefix string, s string) (int, os.Error) {
-	return fmt.Fprintf(n.conn, "<%d>%s: %s\n", p, prefix, s)
+func (n *netConn) writeString(p Priority, prefix string, s string) (int, os.Error) {
+	return fmt.Fprintf(n.conn, "<%d>%s: %s\n", p&0xFF, prefix, s)
 }
 
-func (n netConn) close() os.Error {
+func (n *netConn) close() os.Error {
 	return n.conn.Close()
 }
 
diff -r b0819469a6df src/pkg/syslog/syslog_test.go
--- a/src/pkg/syslog/syslog_test.go	Thu Sep 08 12:16:42 2011 +1000
+++ b/src/pkg/syslog/syslog_test.go	Tue Sep 20 11:29:08 2011 +1000
@@ -7,11 +7,14 @@
 	"io"
 	"log"
 	"net"
+	"os"
 	"testing"
 )
 
 var serverAddr string
 
+const testSocketAddress = "/tmp/fakelog"
+
 func runSyslog(c net.PacketConn, done chan<- string) {
 	var buf [4096]byte
 	var rcvd string = ""
@@ -22,10 +25,12 @@
 		}
 		rcvd += string(buf[0:n])
 	}
+
+	c.Close()
 	done <- rcvd
 }
 
-func startServer(done chan<- string) {
+func startUDPServer(done chan<- string) {
 	c, e := net.ListenPacket("udp", "127.0.0.1:0")
 	if e != nil {
 		log.Fatalf("net.ListenPacket failed udp :0 %v", e)
@@ -35,6 +40,39 @@
 	go runSyslog(c, done)
 }
 
+func runUDPSyslog(c *net.UDPConn, done chan<- string) {
+	var buf [4096]byte
+	var rcvd string = ""
+	for {
+		n, err := c.Read(buf[0:])
+		if err != nil || n == 0 {
+			break
+		}
+		rcvd += string(buf[0:n])
+	}
+
+	c.Close()
+	done <- rcvd
+}
+
+func startUnixServer(done chan<- string) (ready <-chan int) {
+	syslogready := make(chan int, 1)
+	os.Remove(testSocketAddress)
+	uaddr, e := net.ResolveUnixAddr("unixgram", testSocketAddress)
+	if e != nil {
+		log.Fatalf("net.ResolveUnixAddr failed: %v", e)
+	}
+	c, e := net.ListenUnixgram("unixgram", uaddr)
+	if e != nil {
+		log.Fatalf("net.ListenPacket failed unixgram /tmp/fakelog %v", e)
+	}
+
+	c.SetReadTimeout(1000e6) // 100ms
+	go runUDPSyslog(c, done)
+	syslogready <- 1
+	return syslogready
+}
+
 func skipNetTest(t *testing.T) bool {
 	if testing.Short() {
 		// Depends on syslog daemon running, and sometimes it's not.
@@ -44,6 +82,57 @@
 	return false
 }
 
+func TestFakeUnixSyslog(t *testing.T) {
+	done := make(chan string)
+	startUnixServer(done)
+	s, err := Dial("unixgram", "/tmp/fakelog", LOG_INFO|LOG_LOCAL0, "syslog_test")
+	if err != nil {
+		t.Fatalf("Dial() failed: %s", err)
+	}
+	err = s.Debug("Moo")
+	if err != nil {
+		t.Fatalf("s.Debug() failed: %s", err)
+	}
+	expected := "<135>syslog_test: Moo\n"
+	rcvd := <-done
+	if rcvd != expected {
+		t.Fatalf("s.Debug() = '%q', but wanted '%q'", rcvd, expected)
+	}
+	s.Close()
+}
+
+func TestFlap(t *testing.T) {
+	done := make(chan string)
+	startUnixServer(done)
+	s, err := Dial("unixgram", "/tmp/fakelog", LOG_INFO|LOG_LOCAL0, "syslog_test")
+	if err != nil {
+		t.Fatalf("Dial() failed: %s", err)
+	}
+	err = s.Debug("Moo")
+	if err != nil {
+		t.Fatalf("s.Debug() failed: %s", err)
+	}
+	expected := "<135>syslog_test: Moo\n"
+	rcvd := <-done
+	if rcvd != expected {
+		t.Fatalf("s.Debug() = '%q', but wanted '%q'", rcvd, expected)
+	}
+	// restart the server.
+	<-startUnixServer(done)
+
+	// and try retransmitting.
+	err = s.Debug("Re-Moo")
+	if err != nil {
+		t.Fatalf("s.Debug() failed: %s", err)
+	}
+	expected = "<135>syslog_test: Re-Moo\n"
+	rcvd = <-done
+	if rcvd != expected {
+		t.Fatalf("s.Info() = '%q', but wanted '%q'", rcvd, expected)
+	}
+	s.Close()
+}
+
 func TestNew(t *testing.T) {
 	if skipNetTest(t) {
 		return
@@ -79,8 +168,10 @@
 
 func TestUDPDial(t *testing.T) {
 	done := make(chan string)
-	startServer(done)
-	l, err := Dial("udp", serverAddr, LOG_INFO, "syslog_test")
+	startUDPServer(done)
+	// it's important that the Dial priority is different to the
+	// actual message sent - this tests priority splicing.
+	l, err := Dial("udp", serverAddr, LOG_DEBUG, "syslog_test")
 	if err != nil {
 		t.Fatalf("syslog.Dial() failed: %s", err)
 	}
@@ -95,7 +186,7 @@
 
 func TestWrite(t *testing.T) {
 	done := make(chan string)
-	startServer(done)
+	startUDPServer(done)
 	l, err := Dial("udp", serverAddr, LOG_ERR, "syslog_test")
 	if err != nil {
 		t.Fatalf("syslog.Dial() failed: %s", err)
diff -r b0819469a6df src/pkg/syslog/syslog_unix.go
--- a/src/pkg/syslog/syslog_unix.go	Thu Sep 08 12:16:42 2011 +1000
+++ b/src/pkg/syslog/syslog_unix.go	Tue Sep 20 11:29:08 2011 +1000
@@ -23,7 +23,7 @@
 			if err != nil {
 				continue
 			} else {
-				return netConn{conn}, nil
+				return &netConn{conn}, nil
 			}
 		}
 	}
